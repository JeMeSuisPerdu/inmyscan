<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'App__Entity__Scan__CLASSMETADATA__' => 0,
'App__Entity__Role__CLASSMETADATA__' => 1,
'App__Entity__Anime__CLASSMETADATA__' => 2,
'App__Entity__Manga__CLASSMETADATA__' => 3,
'App__Entity__User__CLASSMETADATA__' => 4,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinTableMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinTableMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Scan',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ScanRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'liens' => $o[3],
                        'date_sortie' => $o[4],
                        'date_modification' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'liens' => 'liens',
                        'date_sortie' => 'date_sortie',
                        'date_modification' => 'date_modification',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'liens' => 'liens',
                        'date_sortie' => 'date_sortie',
                        'date_modification' => 'date_modification',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'scan',
                    ],
                ],
                'associationMappings' => [
                    [
                        'manga_id' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[10],
                ],
                'name' => [
                    'App\\Entity\\Scan',
                    7 => 'scan_manga',
                    'scan_id',
                    'manga_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'text',
                    'json',
                    'datetime',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'liens',
                    'date_sortie',
                    'date_modification',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'liens',
                    'date_sortie',
                    'date_modification',
                ],
                'nullable' => [
                    4 => true,
                    true,
                ],
                'fetch' => [
                    6 => 2,
                ],
                'isOnDeleteCascade' => [
                    6 => true,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Scan',
                ],
                'inversedBy' => [
                    6 => 'scans',
                ],
                'joinTable' => [
                    6 => $o[7],
                ],
                'joinTableColumns' => [
                    6 => [
                        'scan_id',
                        'manga_id',
                    ],
                ],
                'relationToSourceKeyColumns' => [
                    6 => [
                        'scan_id' => 'id',
                    ],
                ],
                'relationToTargetKeyColumns' => [
                    6 => [
                        'manga_id' => 'id',
                    ],
                ],
                'joinColumns' => [
                    7 => [
                        $o[8],
                    ],
                ],
                'inverseJoinColumns' => [
                    7 => [
                        $o[9],
                    ],
                ],
                'onDelete' => [
                    8 => 'CASCADE',
                    'CASCADE',
                ],
                'referencedColumnName' => [
                    8 => 'id',
                    'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'manga_id',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Manga',
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Role',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\RoleRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'role',
                    ],
                ],
                'associationMappings' => [
                    [
                        'mangas' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Role',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Role',
                ],
                'mappedBy' => [
                    3 => 'roles',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'mangas',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Manga',
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Anime',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AnimeRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'saison_numero' => $o[2],
                        'episode_number' => $o[3],
                        'lecteur_links' => $o[4],
                        'film' => $o[5],
                        'date_sortie' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'saison_numero' => 'saison_numero',
                        'episode_number' => 'episode_number',
                        'lecteur_links' => 'lecteur_links',
                        'film' => 'film',
                        'date_sortie' => 'date_sortie',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'saison_numero' => 'saison_numero',
                        'episode_number' => 'episode_number',
                        'lecteur_links' => 'lecteur_links',
                        'film' => 'film',
                        'date_sortie' => 'date_sortie',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'anime',
                    ],
                ],
                'associationMappings' => [
                    [
                        'manga_id' => $o[7],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\Anime',
                    8 => 'manga_id_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'integer',
                    'integer',
                    'json',
                    'boolean',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'saison_numero',
                    'episode_number',
                    'lecteur_links',
                    'film',
                    'date_sortie',
                ],
                'columnName' => [
                    1 => 'id',
                    'saison_numero',
                    'episode_number',
                    'lecteur_links',
                    'film',
                    'date_sortie',
                ],
                'nullable' => [
                    4 => true,
                    true,
                    true,
                    8 => false,
                ],
                'options' => [
                    5 => [
                        'default' => false,
                    ],
                ],
                'fetch' => [
                    7 => 2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\Anime',
                ],
                'inversedBy' => [
                    7 => 'episodes',
                ],
                'sourceToTargetKeyColumns' => [
                    7 => [
                        'manga_id_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    7 => [
                        'id' => 'manga_id_id',
                    ],
                ],
                'joinColumns' => [
                    7 => [
                        $o[8],
                    ],
                ],
                'joinColumnFieldNames' => [
                    7 => [
                        'manga_id_id' => 'manga_id_id',
                    ],
                ],
                'unique' => [
                    8 => false,
                ],
                'referencedColumnName' => [
                    8 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'manga_id',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\Manga',
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinTableMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinTableMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Manga',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\MangaRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'titre' => $o[2],
                        'description' => $o[3],
                        'photo' => $o[4],
                        'author' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'titre' => 'titre',
                        'description' => 'description',
                        'photo' => 'photo',
                        'author' => 'author',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'titre' => 'titre',
                        'description' => 'description',
                        'photo' => 'photo',
                        'author' => 'author',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'manga',
                    ],
                ],
                'associationMappings' => [
                    [
                        'episodes' => $o[6],
                        'scans' => $o[7],
                        'roles' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[12],
                ],
                'name' => [
                    'App\\Entity\\Manga',
                    9 => 'role_manga',
                    'manga_id',
                    'role_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'titre',
                    'description',
                    'photo',
                    'author',
                ],
                'columnName' => [
                    1 => 'id',
                    'titre',
                    'description',
                    'photo',
                    'author',
                ],
                'length' => [
                    2 => 255,
                    4 => 255,
                    255,
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                ],
                'cascade' => [
                    6 => [
                        'remove',
                    ],
                ],
                'fetch' => [
                    6 => 2,
                    2,
                    2,
                ],
                'orphanRemoval' => [
                    6 => true,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Manga',
                    'App\\Entity\\Manga',
                    'App\\Entity\\Manga',
                ],
                'mappedBy' => [
                    6 => 'manga_id',
                    'manga_id',
                ],
                'isOnDeleteCascade' => [
                    8 => true,
                ],
                'inversedBy' => [
                    8 => 'mangas',
                ],
                'joinTable' => [
                    8 => $o[9],
                ],
                'joinTableColumns' => [
                    8 => [
                        'manga_id',
                        'role_id',
                    ],
                ],
                'relationToSourceKeyColumns' => [
                    8 => [
                        'manga_id' => 'id',
                    ],
                ],
                'relationToTargetKeyColumns' => [
                    8 => [
                        'role_id' => 'id',
                    ],
                ],
                'joinColumns' => [
                    9 => [
                        $o[10],
                    ],
                ],
                'inverseJoinColumns' => [
                    9 => [
                        $o[11],
                    ],
                ],
                'onDelete' => [
                    10 => 'CASCADE',
                    'CASCADE',
                ],
                'referencedColumnName' => [
                    10 => 'id',
                    'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'episodes',
                    'scans',
                    'roles',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Anime',
                    'App\\Entity\\Scan',
                    'App\\Entity\\Role',
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\User',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\UserRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'email' => $o[2],
                        'password' => $o[3],
                        'roles' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'password' => 'password',
                        'roles' => 'roles',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'password' => 'password',
                        'roles' => 'roles',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'user',
                        'quoted' => true,
                    ],
                ],
                'idGenerator' => [
                    $o[5],
                ],
                'name' => [
                    'App\\Entity\\User',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'json',
                ],
                'fieldName' => [
                    1 => 'id',
                    'email',
                    'password',
                    'roles',
                ],
                'columnName' => [
                    1 => 'id',
                    'email',
                    'password',
                    'roles',
                ],
                'length' => [
                    2 => 255,
                    255,
                ],
                'unique' => [
                    2 => true,
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
